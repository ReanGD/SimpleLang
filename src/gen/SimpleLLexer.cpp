/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : src/SimpleL.g
 *     -                            On : 2012-07-09 18:44:44
 *     -                 for the lexer : SimpleLLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "SimpleLLexer.h"
/* ----------------------------------------- */


/** String literals used by SimpleLLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x45, 0x58, 0x49, 0x54,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x21, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pSimpleLLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pSimpleLLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pSimpleLLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pSimpleLLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))


/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER
#undef	    RULEMEMO
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or UTF16 input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_8BIT) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_8BIT

/* 8 bit character set */

#  define	    NEXTCHAR	((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR	((pANTLR3_UINT16)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define            CONSUME()                                           \
{                                                                       \
    if        (NEXTCHAR < (DATAP + INPUT->sizeBuf))                     \
    {                                                                   \
        INPUT->charPositionInLine++;                                    \
        if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)           \
        {                                                               \
            INPUT->line++;                                              \
            INPUT->charPositionInLine        = 0;                       \
            INPUT->currentLine                = (void *)(NEXTCHAR + 1); \
        }                                                               \
        INPUT->nextChar = (void *)(NEXTCHAR + 1);                       \
    }                                                                   \
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()   INPUT->istream->consume(INPUT->istream)
#define	    LA(n)       INPUT->istream->_LA(INPUT->istream, n)

#endif

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE 
 void
	mKW_EXIT    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mEQUAL    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mASSIGN    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mNOT_EQUAL    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mELT    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mELE    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mEGE    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mEGT    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mPLUS    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mMINUS    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mSTAR    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mSLASH    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mDOT    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mCOLON    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mLPAREN    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mRPAREN    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mLBRACK    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mRBRACK    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mSEMI    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mDIGIT    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mLETTER    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mIDENT    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mINT    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mWS    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mCOMMENT    (pSimpleLLexer ctx);
static ANTLR3_INLINE 
 void
	mTokens    (pSimpleLLexer ctx);
static void	SimpleLLexerFree(pSimpleLLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
SimpleLLexerFree  (pSimpleLLexer ctx)
{
    LEXER->free(LEXER);

    ANTLR3_FREE(ctx);
}

static void
SimpleLLexerReset (pSimpleLLexer ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "src/SimpleL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called SimpleLLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pSimpleLLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pSimpleLLexer SimpleLLexerNew
(
pANTLR3_INPUT_STREAM
 instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return SimpleLLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called SimpleLLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pSimpleLLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pSimpleLLexer SimpleLLexerNewSSD
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pSimpleLLexer ctx; // Context structure we will build and return

    ctx = (pSimpleLLexer) ANTLR3_CALLOC(1, sizeof(SimpleLLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in SimpleLLexer.h here so you can get a sense
     * of what goes where.
     */

    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);

    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our SimpleLLexer interface
     */
    ctx->mKW_EXIT	= mKW_EXIT;
    ctx->mEQUAL	= mEQUAL;
    ctx->mASSIGN	= mASSIGN;
    ctx->mNOT_EQUAL	= mNOT_EQUAL;
    ctx->mELT	= mELT;
    ctx->mELE	= mELE;
    ctx->mEGE	= mEGE;
    ctx->mEGT	= mEGT;
    ctx->mPLUS	= mPLUS;
    ctx->mMINUS	= mMINUS;
    ctx->mSTAR	= mSTAR;
    ctx->mSLASH	= mSLASH;
    ctx->mDOT	= mDOT;
    ctx->mCOLON	= mCOLON;
    ctx->mLPAREN	= mLPAREN;
    ctx->mRPAREN	= mRPAREN;
    ctx->mLBRACK	= mLBRACK;
    ctx->mRBRACK	= mRBRACK;
    ctx->mSEMI	= mSEMI;
    ctx->mDIGIT	= mDIGIT;
    ctx->mLETTER	= mLETTER;
    ctx->mIDENT	= mIDENT;
    ctx->mINT	= mINT;
    ctx->mWS	= mWS;
    ctx->mCOMMENT	= mCOMMENT;
    ctx->mTokens	= mTokens;

    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;

    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);

    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= SimpleLLexerFree;
    ctx->reset          = SimpleLLexerReset;


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}
/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 91:9: ( 'EXIT' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start KW_EXIT
 *
 * Looks to match the characters the constitute the token KW_EXIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mKW_EXIT(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = KW_EXIT;


    // src/SimpleL.g:91:9: ( 'EXIT' )
    // src/SimpleL.g:91:11: 'EXIT'
    {
        MATCHS(lit_1);
        if  (HASEXCEPTION())
        {
            goto ruleKW_EXITEx;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleKW_EXITEx; /* Prevent compiler warnings */
    ruleKW_EXITEx: ;

}
// $ANTLR end KW_EXIT

//   Comes from: 96:11: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EQUAL
 *
 * Looks to match the characters the constitute the token EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEQUAL(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EQUAL;


    // src/SimpleL.g:96:11: ( '==' )
    // src/SimpleL.g:96:13: '=='
    {
        MATCHS(lit_2);
        if  (HASEXCEPTION())
        {
            goto ruleEQUALEx;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleEQUALEx; /* Prevent compiler warnings */
    ruleEQUALEx: ;

}
// $ANTLR end EQUAL

//   Comes from: 94:11: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ASSIGN
 *
 * Looks to match the characters the constitute the token ASSIGN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mASSIGN(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ASSIGN;


    // src/SimpleL.g:94:11: ( '=' )
    // src/SimpleL.g:94:13: '='
    {
        MATCHC('=');
        if  (HASEXCEPTION())
        {
            goto ruleASSIGNEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleASSIGNEx; /* Prevent compiler warnings */
    ruleASSIGNEx: ;

}
// $ANTLR end ASSIGN

//   Comes from: 95:11: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NOT_EQUAL
 *
 * Looks to match the characters the constitute the token NOT_EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNOT_EQUAL(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NOT_EQUAL;


    // src/SimpleL.g:95:11: ( '!=' )
    // src/SimpleL.g:95:13: '!='
    {
        MATCHS(lit_3);
        if  (HASEXCEPTION())
        {
            goto ruleNOT_EQUALEx;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleNOT_EQUALEx; /* Prevent compiler warnings */
    ruleNOT_EQUALEx: ;

}
// $ANTLR end NOT_EQUAL

//   Comes from: 96:11: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ELT
 *
 * Looks to match the characters the constitute the token ELT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mELT(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ELT;


    // src/SimpleL.g:96:11: ( '<' )
    // src/SimpleL.g:96:13: '<'
    {
        MATCHC('<');
        if  (HASEXCEPTION())
        {
            goto ruleELTEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleELTEx; /* Prevent compiler warnings */
    ruleELTEx: ;

}
// $ANTLR end ELT

//   Comes from: 97:11: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ELE
 *
 * Looks to match the characters the constitute the token ELE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mELE(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ELE;


    // src/SimpleL.g:97:11: ( '<=' )
    // src/SimpleL.g:97:13: '<='
    {
        MATCHS(lit_4);
        if  (HASEXCEPTION())
        {
            goto ruleELEEx;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleELEEx; /* Prevent compiler warnings */
    ruleELEEx: ;

}
// $ANTLR end ELE

//   Comes from: 98:11: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EGE
 *
 * Looks to match the characters the constitute the token EGE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEGE(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EGE;


    // src/SimpleL.g:98:11: ( '>=' )
    // src/SimpleL.g:98:13: '>='
    {
        MATCHS(lit_5);
        if  (HASEXCEPTION())
        {
            goto ruleEGEEx;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleEGEEx; /* Prevent compiler warnings */
    ruleEGEEx: ;

}
// $ANTLR end EGE

//   Comes from: 99:11: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EGT
 *
 * Looks to match the characters the constitute the token EGT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEGT(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EGT;


    // src/SimpleL.g:99:11: ( '>' )
    // src/SimpleL.g:99:13: '>'
    {
        MATCHC('>');
        if  (HASEXCEPTION())
        {
            goto ruleEGTEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleEGTEx; /* Prevent compiler warnings */
    ruleEGTEx: ;

}
// $ANTLR end EGT

//   Comes from: 100:11: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PLUS
 *
 * Looks to match the characters the constitute the token PLUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPLUS(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PLUS;


    // src/SimpleL.g:100:11: ( '+' )
    // src/SimpleL.g:100:13: '+'
    {
        MATCHC('+');
        if  (HASEXCEPTION())
        {
            goto rulePLUSEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto rulePLUSEx; /* Prevent compiler warnings */
    rulePLUSEx: ;

}
// $ANTLR end PLUS

//   Comes from: 101:11: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MINUS
 *
 * Looks to match the characters the constitute the token MINUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mMINUS(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = MINUS;


    // src/SimpleL.g:101:11: ( '-' )
    // src/SimpleL.g:101:13: '-'
    {
        MATCHC('-');
        if  (HASEXCEPTION())
        {
            goto ruleMINUSEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleMINUSEx; /* Prevent compiler warnings */
    ruleMINUSEx: ;

}
// $ANTLR end MINUS

//   Comes from: 102:11: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STAR
 *
 * Looks to match the characters the constitute the token STAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTAR(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STAR;


    // src/SimpleL.g:102:11: ( '*' )
    // src/SimpleL.g:102:13: '*'
    {
        MATCHC('*');
        if  (HASEXCEPTION())
        {
            goto ruleSTAREx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSTAREx; /* Prevent compiler warnings */
    ruleSTAREx: ;

}
// $ANTLR end STAR

//   Comes from: 103:11: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SLASH
 *
 * Looks to match the characters the constitute the token SLASH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSLASH(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SLASH;


    // src/SimpleL.g:103:11: ( '/' )
    // src/SimpleL.g:103:13: '/'
    {
        MATCHC('/');
        if  (HASEXCEPTION())
        {
            goto ruleSLASHEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSLASHEx; /* Prevent compiler warnings */
    ruleSLASHEx: ;

}
// $ANTLR end SLASH

//   Comes from: 104:11: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOT
 *
 * Looks to match the characters the constitute the token DOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDOT(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DOT;


    // src/SimpleL.g:104:11: ( '.' )
    // src/SimpleL.g:104:13: '.'
    {
        MATCHC('.');
        if  (HASEXCEPTION())
        {
            goto ruleDOTEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleDOTEx; /* Prevent compiler warnings */
    ruleDOTEx: ;

}
// $ANTLR end DOT

//   Comes from: 105:11: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLON
 *
 * Looks to match the characters the constitute the token COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOLON(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COLON;


    // src/SimpleL.g:105:11: ( ':' )
    // src/SimpleL.g:105:13: ':'
    {
        MATCHC(':');
        if  (HASEXCEPTION())
        {
            goto ruleCOLONEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCOLONEx; /* Prevent compiler warnings */
    ruleCOLONEx: ;

}
// $ANTLR end COLON

//   Comes from: 106:11: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LPAREN
 *
 * Looks to match the characters the constitute the token LPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLPAREN(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LPAREN;


    // src/SimpleL.g:106:11: ( '(' )
    // src/SimpleL.g:106:13: '('
    {
        MATCHC('(');
        if  (HASEXCEPTION())
        {
            goto ruleLPARENEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleLPARENEx; /* Prevent compiler warnings */
    ruleLPARENEx: ;

}
// $ANTLR end LPAREN

//   Comes from: 107:11: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RPAREN
 *
 * Looks to match the characters the constitute the token RPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRPAREN(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RPAREN;


    // src/SimpleL.g:107:11: ( ')' )
    // src/SimpleL.g:107:13: ')'
    {
        MATCHC(')');
        if  (HASEXCEPTION())
        {
            goto ruleRPARENEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleRPARENEx; /* Prevent compiler warnings */
    ruleRPARENEx: ;

}
// $ANTLR end RPAREN

//   Comes from: 108:11: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LBRACK
 *
 * Looks to match the characters the constitute the token LBRACK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLBRACK(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LBRACK;


    // src/SimpleL.g:108:11: ( '[' )
    // src/SimpleL.g:108:13: '['
    {
        MATCHC('[');
        if  (HASEXCEPTION())
        {
            goto ruleLBRACKEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleLBRACKEx; /* Prevent compiler warnings */
    ruleLBRACKEx: ;

}
// $ANTLR end LBRACK

//   Comes from: 109:11: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RBRACK
 *
 * Looks to match the characters the constitute the token RBRACK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRBRACK(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RBRACK;


    // src/SimpleL.g:109:11: ( ']' )
    // src/SimpleL.g:109:13: ']'
    {
        MATCHC(']');
        if  (HASEXCEPTION())
        {
            goto ruleRBRACKEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleRBRACKEx; /* Prevent compiler warnings */
    ruleRBRACKEx: ;

}
// $ANTLR end RBRACK

//   Comes from: 110:11: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMI
 *
 * Looks to match the characters the constitute the token SEMI
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSEMI(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SEMI;


    // src/SimpleL.g:110:11: ( ';' )
    // src/SimpleL.g:110:13: ';'
    {
        MATCHC(';');
        if  (HASEXCEPTION())
        {
            goto ruleSEMIEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSEMIEx; /* Prevent compiler warnings */
    ruleSEMIEx: ;

}
// $ANTLR end SEMI

//   Comes from: 119:5: ( '0' .. '9' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIGIT
 *
 * Looks to match the characters the constitute the token DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDIGIT(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // src/SimpleL.g:119:5: ( '0' .. '9' )
    // src/SimpleL.g:
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleDIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleDIGITEx; /* Prevent compiler warnings */
    ruleDIGITEx: ;

}
// $ANTLR end DIGIT

//   Comes from: 120:5: ( 'A' .. 'Z' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LETTER
 *
 * Looks to match the characters the constitute the token LETTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLETTER(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // src/SimpleL.g:120:5: ( 'A' .. 'Z' )
    // src/SimpleL.g:
    {
        if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleLETTEREx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleLETTEREx; /* Prevent compiler warnings */
    ruleLETTEREx: ;

}
// $ANTLR end LETTER

//   Comes from: 124:5: ( ( LETTER | '_' ) ( LETTER | DIGIT | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IDENT
 *
 * Looks to match the characters the constitute the token IDENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mIDENT(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = IDENT;


    // src/SimpleL.g:124:5: ( ( LETTER | '_' ) ( LETTER | DIGIT | '_' )* )
    // src/SimpleL.g:124:7: ( LETTER | '_' ) ( LETTER | DIGIT | '_' )*
    {
        if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleIDENTEx;
        }


        // src/SimpleL.g:124:20: ( LETTER | DIGIT | '_' )*

        for (;;)
        {
            int alt1=2;
            switch ( LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            	{
            		alt1=1;
            	}
                break;

            }

            switch (alt1)
            {
        	case 1:
        	    // src/SimpleL.g:
        	    {
        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleIDENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop1;	/* break out of the loop */
        	    break;
            }
        }
        loop1: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleIDENTEx; /* Prevent compiler warnings */
    ruleIDENTEx: ;

}
// $ANTLR end IDENT

//   Comes from: 128:5: ( ( DIGIT )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT
 *
 * Looks to match the characters the constitute the token INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINT(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INT;


    // src/SimpleL.g:128:5: ( ( DIGIT )+ )
    // src/SimpleL.g:128:7: ( DIGIT )+
    {
        // src/SimpleL.g:128:7: ( DIGIT )+
        {
            int cnt2=0;

            for (;;)
            {
                int alt2=2;
        	switch ( LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt2=1;
        		}
        	    break;

        	}

        	switch (alt2)
        	{
        	    case 1:
        	        // src/SimpleL.g:
        	        {
        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleINTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt2 >= 1 )
        		{
        		    goto loop2;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleINTEx;
        	}
        	cnt2++;
            }
            loop2: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleINTEx; /* Prevent compiler warnings */
    ruleINTEx: ;

}
// $ANTLR end INT

//   Comes from: 138:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;


    // src/SimpleL.g:138:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
    // src/SimpleL.g:138:6: ( ' ' | '\\t' | '\\r' | '\\n' )+
    {
        // src/SimpleL.g:138:6: ( ' ' | '\\t' | '\\r' | '\\n' )+
        {
            int cnt3=0;

            for (;;)
            {
                int alt3=2;
        	switch ( LA(1) )
        	{
        	case '\t':
        	case '\n':
        	case '\r':
        	case ' ':
        		{
        			alt3=1;
        		}
        	    break;

        	}

        	switch (alt3)
        	{
        	    case 1:
        	        // src/SimpleL.g:
        	        {
        	            if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleWSEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt3 >= 1 )
        		{
        		    goto loop3;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleWSEx;
        	}
        	cnt3++;
            }
            loop3: ;	/* Jump to here if this rule does not match */
        }

        {
             LEXSTATE->channel=HIDDEN; 
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 139:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENT(pSimpleLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMENT;


    // src/SimpleL.g:139:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
    // src/SimpleL.g:139:7: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    {
        MATCHS(lit_6);
        if  (HASEXCEPTION())
        {
            goto ruleCOMMENTEx;
        }




        // src/SimpleL.g:139:12: (~ ( '\\n' | '\\r' ) )*

        for (;;)
        {
            int alt4=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA4_0 = LA(1);
                if ( (((LA4_0 >= 0x0000) && (LA4_0 <= '\t')) || ((LA4_0 >= 0x000B) && (LA4_0 <= '\f')) || ((LA4_0 >= 0x000E) && (LA4_0 <= 0xFFFF))))
                {
                    alt4=1;
                }

            }
            switch (alt4)
            {
        	case 1:
        	    // src/SimpleL.g:
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop4;	/* break out of the loop */
        	    break;
            }
        }
        loop4: ; /* Jump out to here if this rule does not match */


        // src/SimpleL.g:139:26: ( '\\r' )?
        {
            int alt5=2;
            switch ( LA(1) )
            {
                case '\r':
                	{
                		alt5=1;
                	}
                    break;
            }

            switch (alt5)
            {
        	case 1:
        	    // src/SimpleL.g:139:26: '\\r'
        	    {
        	        MATCHC('\r');
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleCOMMENTEx;
        	        }


        	    }
        	    break;

            }
        }

        MATCHC('\n');
        if  (HASEXCEPTION())
        {
            goto ruleCOMMENTEx;
        }


        {
            LEXSTATE->channel=HIDDEN;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void
mTokens(pSimpleLLexer ctx)
{
    {
        //  src/SimpleL.g:1:8: ( KW_EXIT | EQUAL | ASSIGN | NOT_EQUAL | ELT | ELE | EGE | EGT | PLUS | MINUS | STAR | SLASH | DOT | COLON | LPAREN | RPAREN | LBRACK | RBRACK | SEMI | IDENT | INT | WS | COMMENT )

        ANTLR3_UINT32 alt6;

        alt6=23;

        switch ( LA(1) )
        {
        case 'E':
        	{
        		switch ( LA(2) )
        		{
        		case 'X':
        			{
        				switch ( LA(3) )
        				{
        				case 'I':
        					{
        						switch ( LA(4) )
        						{
        						case 'T':
        							{
        								switch ( LA(5) )
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        									{
        										alt6=20;
        									}
        								    break;

        								default:
        								    alt6=1;
        								}

        							}
        						    break;

        						default:
        						    alt6=20;
        						}

        					}
        				    break;

        				default:
        				    alt6=20;
        				}

        			}
        		    break;

        		default:
        		    alt6=20;
        		}

        	}
            break;
        case '=':
        	{
        		switch ( LA(2) )
        		{
        		case '=':
        			{
        				alt6=2;
        			}
        		    break;

        		default:
        		    alt6=3;
        		}

        	}
            break;
        case '!':
        	{
        		alt6=4;
        	}
            break;
        case '<':
        	{
        		switch ( LA(2) )
        		{
        		case '=':
        			{
        				alt6=6;
        			}
        		    break;

        		default:
        		    alt6=5;
        		}

        	}
            break;
        case '>':
        	{
        		switch ( LA(2) )
        		{
        		case '=':
        			{
        				alt6=7;
        			}
        		    break;

        		default:
        		    alt6=8;
        		}

        	}
            break;
        case '+':
        	{
        		alt6=9;
        	}
            break;
        case '-':
        	{
        		alt6=10;
        	}
            break;
        case '*':
        	{
        		alt6=11;
        	}
            break;
        case '/':
        	{
        		switch ( LA(2) )
        		{
        		case '/':
        			{
        				alt6=23;
        			}
        		    break;

        		default:
        		    alt6=12;
        		}

        	}
            break;
        case '.':
        	{
        		alt6=13;
        	}
            break;
        case ':':
        	{
        		alt6=14;
        	}
            break;
        case '(':
        	{
        		alt6=15;
        	}
            break;
        case ')':
        	{
        		alt6=16;
        	}
            break;
        case '[':
        	{
        		alt6=17;
        	}
            break;
        case ']':
        	{
        		alt6=18;
        	}
            break;
        case ';':
        	{
        		alt6=19;
        	}
            break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '_':
        	{
        		alt6=20;
        	}
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	{
        		alt6=21;
        	}
            break;
        case '\t':
        case '\n':
        case '\r':
        case ' ':
        	{
        		alt6=22;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 6;
            EXCEPTION->state        = 0;


            goto ruleTokensEx;

        }

        switch (alt6)
        {
    	case 1:
    	    // src/SimpleL.g:1:10: KW_EXIT
    	    {
    	        /* 1:10: KW_EXIT */
    	        mKW_EXIT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // src/SimpleL.g:1:18: EQUAL
    	    {
    	        /* 1:18: EQUAL */
    	        mEQUAL(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // src/SimpleL.g:1:24: ASSIGN
    	    {
    	        /* 1:24: ASSIGN */
    	        mASSIGN(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // src/SimpleL.g:1:31: NOT_EQUAL
    	    {
    	        /* 1:31: NOT_EQUAL */
    	        mNOT_EQUAL(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // src/SimpleL.g:1:41: ELT
    	    {
    	        /* 1:41: ELT */
    	        mELT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // src/SimpleL.g:1:45: ELE
    	    {
    	        /* 1:45: ELE */
    	        mELE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // src/SimpleL.g:1:49: EGE
    	    {
    	        /* 1:49: EGE */
    	        mEGE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // src/SimpleL.g:1:53: EGT
    	    {
    	        /* 1:53: EGT */
    	        mEGT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // src/SimpleL.g:1:57: PLUS
    	    {
    	        /* 1:57: PLUS */
    	        mPLUS(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // src/SimpleL.g:1:62: MINUS
    	    {
    	        /* 1:62: MINUS */
    	        mMINUS(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // src/SimpleL.g:1:68: STAR
    	    {
    	        /* 1:68: STAR */
    	        mSTAR(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // src/SimpleL.g:1:73: SLASH
    	    {
    	        /* 1:73: SLASH */
    	        mSLASH(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // src/SimpleL.g:1:79: DOT
    	    {
    	        /* 1:79: DOT */
    	        mDOT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // src/SimpleL.g:1:83: COLON
    	    {
    	        /* 1:83: COLON */
    	        mCOLON(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // src/SimpleL.g:1:89: LPAREN
    	    {
    	        /* 1:89: LPAREN */
    	        mLPAREN(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // src/SimpleL.g:1:96: RPAREN
    	    {
    	        /* 1:96: RPAREN */
    	        mRPAREN(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // src/SimpleL.g:1:103: LBRACK
    	    {
    	        /* 1:103: LBRACK */
    	        mLBRACK(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // src/SimpleL.g:1:110: RBRACK
    	    {
    	        /* 1:110: RBRACK */
    	        mRBRACK(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // src/SimpleL.g:1:117: SEMI
    	    {
    	        /* 1:117: SEMI */
    	        mSEMI(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // src/SimpleL.g:1:122: IDENT
    	    {
    	        /* 1:122: IDENT */
    	        mIDENT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // src/SimpleL.g:1:128: INT
    	    {
    	        /* 1:128: INT */
    	        mINT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // src/SimpleL.g:1:132: WS
    	    {
    	        /* 1:132: WS */
    	        mWS(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // src/SimpleL.g:1:135: COMMENT
    	    {
    	        /* 1:135: COMMENT */
    	        mCOMMENT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */


/* End of code
 * =============================================================================
 */

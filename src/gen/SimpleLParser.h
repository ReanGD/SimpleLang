/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : src/SimpleL.g
 *     -                            On : 2012-07-09 18:44:43
 *     -                for the parser : SimpleLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
SimpleLParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSimpleLParser, which is returned from a call to SimpleLParserNew().
 *
 * The methods in pSimpleLParser are  as follows:
 *
 *  - 
 SimpleLParser_program_return
      pSimpleLParser->program(pSimpleLParser)
 *  - 
 SimpleLParser_statement_return
      pSimpleLParser->statement(pSimpleLParser)
 *  - 
 SimpleLParser_assignmentStatement_return
      pSimpleLParser->assignmentStatement(pSimpleLParser)
 *  - 
 SimpleLParser_callStatement_return
      pSimpleLParser->callStatement(pSimpleLParser)
 *  - 
 SimpleLParser_expression_return
      pSimpleLParser->expression(pSimpleLParser)
 *  - 
 SimpleLParser_term_return
      pSimpleLParser->term(pSimpleLParser)
 *  - 
 SimpleLParser_signedFactor_return
      pSimpleLParser->signedFactor(pSimpleLParser)
 *  - 
 SimpleLParser_factor_return
      pSimpleLParser->factor(pSimpleLParser)
 *  - 
 SimpleLParser_variable_return
      pSimpleLParser->variable(pSimpleLParser)
 *  - 
 SimpleLParser_identifier_return
      pSimpleLParser->identifier(pSimpleLParser)
 *  - 
 SimpleLParser_ident_return
      pSimpleLParser->ident(pSimpleLParser)
 *  - 
 SimpleLParser_unsignedInteger_return
      pSimpleLParser->unsignedInteger(pSimpleLParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SimpleLParser_H
#define _SimpleLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SimpleLParser_Ctx_struct SimpleLParser, * pSimpleLParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct SimpleLParser_program_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_program_return;



typedef struct SimpleLParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_statement_return;



typedef struct SimpleLParser_assignmentStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_assignmentStatement_return;



typedef struct SimpleLParser_callStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_callStatement_return;



typedef struct SimpleLParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_expression_return;



typedef struct SimpleLParser_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_term_return;



typedef struct SimpleLParser_signedFactor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_signedFactor_return;



typedef struct SimpleLParser_factor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_factor_return;



typedef struct SimpleLParser_variable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_variable_return;



typedef struct SimpleLParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_identifier_return;



typedef struct SimpleLParser_ident_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_ident_return;



typedef struct SimpleLParser_unsignedInteger_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SimpleLParser_unsignedInteger_return;




/** Context tracking structure for 
SimpleLParser

 */
struct SimpleLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     SimpleLParser_program_return
     (*program)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_statement_return
     (*statement)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_assignmentStatement_return
     (*assignmentStatement)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_callStatement_return
     (*callStatement)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_expression_return
     (*expression)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_term_return
     (*term)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_signedFactor_return
     (*signedFactor)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_factor_return
     (*factor)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_variable_return
     (*variable)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_identifier_return
     (*identifier)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_ident_return
     (*ident)	(struct SimpleLParser_Ctx_struct * ctx);

     SimpleLParser_unsignedInteger_return
     (*unsignedInteger)	(struct SimpleLParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct SimpleLParser_Ctx_struct * ctx);
    void	    (*free)   (struct SimpleLParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSimpleLParser SimpleLParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pSimpleLParser SimpleLParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ASSIGN      4
#define ASSIGN_VAR      5
#define COLON      6
#define COMMENT      7
#define DIGIT      8
#define DOT      9
#define EGE      10
#define EGT      11
#define ELE      12
#define ELT      13
#define EQUAL      14
#define FUNC_CALL      15
#define IDENT      16
#define INT      17
#define KW_EXIT      18
#define LBRACK      19
#define LETTER      20
#define LPAREN      21
#define MINUS      22
#define NOT_EQUAL      23
#define PLUS      24
#define RBRACK      25
#define RPAREN      26
#define SEMI      27
#define SLASH      28
#define STAR      29
#define WS      30
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SimpleLParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */

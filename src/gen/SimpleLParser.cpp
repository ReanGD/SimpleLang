/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : src/SimpleL.g
 *     -                            On : 2012-07-09 18:44:43
 *     -                for the parser : SimpleLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "SimpleLParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pSimpleLParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pSimpleLParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pSimpleLParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pSimpleLParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   SimpleLParserTokenNames[27+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "ASSIGN",
        (pANTLR3_UINT8) "ASSIGN_VAR",
        (pANTLR3_UINT8) "COLON",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "EGE",
        (pANTLR3_UINT8) "EGT",
        (pANTLR3_UINT8) "ELE",
        (pANTLR3_UINT8) "ELT",
        (pANTLR3_UINT8) "EQUAL",
        (pANTLR3_UINT8) "FUNC_CALL",
        (pANTLR3_UINT8) "IDENT",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "KW_EXIT",
        (pANTLR3_UINT8) "LBRACK",
        (pANTLR3_UINT8) "LETTER",
        (pANTLR3_UINT8) "LPAREN",
        (pANTLR3_UINT8) "MINUS",
        (pANTLR3_UINT8) "NOT_EQUAL",
        (pANTLR3_UINT8) "PLUS",
        (pANTLR3_UINT8) "RBRACK",
        (pANTLR3_UINT8) "RPAREN",
        (pANTLR3_UINT8) "SEMI",
        (pANTLR3_UINT8) "SLASH",
        (pANTLR3_UINT8) "STAR",
        (pANTLR3_UINT8) "WS"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 SimpleLParser_program_return
	program    (pSimpleLParser ctx);
static 
 SimpleLParser_statement_return
	statement    (pSimpleLParser ctx);
static 
 SimpleLParser_assignmentStatement_return
	assignmentStatement    (pSimpleLParser ctx);
static 
 SimpleLParser_callStatement_return
	callStatement    (pSimpleLParser ctx);
static 
 SimpleLParser_expression_return
	expression    (pSimpleLParser ctx);
static 
 SimpleLParser_term_return
	term    (pSimpleLParser ctx);
static 
 SimpleLParser_signedFactor_return
	signedFactor    (pSimpleLParser ctx);
static 
 SimpleLParser_factor_return
	factor    (pSimpleLParser ctx);
static 
 SimpleLParser_variable_return
	variable    (pSimpleLParser ctx);
static 
 SimpleLParser_identifier_return
	identifier    (pSimpleLParser ctx);
static 
 SimpleLParser_ident_return
	ident    (pSimpleLParser ctx);
static 
 SimpleLParser_unsignedInteger_return
	unsignedInteger    (pSimpleLParser ctx);
static void	SimpleLParserFree(pSimpleLParser ctx);
static void     SimpleLParserReset (pSimpleLParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "src/SimpleL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new SimpleLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pSimpleLParser
SimpleLParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return SimpleLParserNewSSD(instream, NULL);
}

/** \brief Create a new SimpleLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pSimpleLParser
SimpleLParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pSimpleLParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pSimpleLParser) ANTLR3_CALLOC(1, sizeof(SimpleLParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in SimpleLParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our SimpleLParser interface
     */
    ctx->program	= program;
    ctx->statement	= statement;
    ctx->assignmentStatement	= assignmentStatement;
    ctx->callStatement	= callStatement;
    ctx->expression	= expression;
    ctx->term	= term;
    ctx->signedFactor	= signedFactor;
    ctx->factor	= factor;
    ctx->variable	= variable;
    ctx->identifier	= identifier;
    ctx->ident	= ident;
    ctx->unsignedInteger	= unsignedInteger;
    ctx->free			= SimpleLParserFree;
    ctx->reset			= SimpleLParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */
ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);

ctx->vectors	= antlr3VectorFactoryNew(0);
    /* Install the token table
     */
    PSRSTATE->tokenNames   = SimpleLParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
SimpleLParserReset (pSimpleLParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 SimpleLParserFree(pSimpleLParser ctx)
 {
    /* Free any scope memory
     */

ctx->vectors->close(ctx->vectors);
/* We created the adaptor so we must free it
 */
ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return SimpleLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_program87  */
static	ANTLR3_BITWORD FOLLOW_statement_in_program87_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_program87	= { FOLLOW_statement_in_program87_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMI_in_program89  */
static	ANTLR3_BITWORD FOLLOW_SEMI_in_program89_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000050002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMI_in_program89	= { FOLLOW_SEMI_in_program89_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_assignmentStatement_in_statement112  */
static	ANTLR3_BITWORD FOLLOW_assignmentStatement_in_statement112_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_assignmentStatement_in_statement112	= { FOLLOW_assignmentStatement_in_statement112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_callStatement_in_statement120  */
static	ANTLR3_BITWORD FOLLOW_callStatement_in_statement120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_callStatement_in_statement120	= { FOLLOW_callStatement_in_statement120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_identifier_in_assignmentStatement137  */
static	ANTLR3_BITWORD FOLLOW_identifier_in_assignmentStatement137_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_identifier_in_assignmentStatement137	= { FOLLOW_identifier_in_assignmentStatement137_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASSIGN_in_assignmentStatement139  */
static	ANTLR3_BITWORD FOLLOW_ASSIGN_in_assignmentStatement139_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001630000) };
static  ANTLR3_BITSET_LIST FOLLOW_ASSIGN_in_assignmentStatement139	= { FOLLOW_ASSIGN_in_assignmentStatement139_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_assignmentStatement141  */
static	ANTLR3_BITWORD FOLLOW_expression_in_assignmentStatement141_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_assignmentStatement141	= { FOLLOW_expression_in_assignmentStatement141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_KW_EXIT_in_callStatement168  */
static	ANTLR3_BITWORD FOLLOW_KW_EXIT_in_callStatement168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_KW_EXIT_in_callStatement168	= { FOLLOW_KW_EXIT_in_callStatement168_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_identifier_in_callStatement170  */
static	ANTLR3_BITWORD FOLLOW_identifier_in_callStatement170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_identifier_in_callStatement170	= { FOLLOW_identifier_in_callStatement170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expression199  */
static	ANTLR3_BITWORD FOLLOW_term_in_expression199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001400002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expression199	= { FOLLOW_term_in_expression199_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUS_in_expression210  */
static	ANTLR3_BITWORD FOLLOW_PLUS_in_expression210_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001630000) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUS_in_expression210	= { FOLLOW_PLUS_in_expression210_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUS_in_expression215  */
static	ANTLR3_BITWORD FOLLOW_MINUS_in_expression215_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001630000) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUS_in_expression215	= { FOLLOW_MINUS_in_expression215_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_term_in_expression220  */
static	ANTLR3_BITWORD FOLLOW_term_in_expression220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001400002) };
static  ANTLR3_BITSET_LIST FOLLOW_term_in_expression220	= { FOLLOW_term_in_expression220_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signedFactor_in_term240  */
static	ANTLR3_BITWORD FOLLOW_signedFactor_in_term240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000030000002) };
static  ANTLR3_BITSET_LIST FOLLOW_signedFactor_in_term240	= { FOLLOW_signedFactor_in_term240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STAR_in_term251  */
static	ANTLR3_BITWORD FOLLOW_STAR_in_term251_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001630000) };
static  ANTLR3_BITSET_LIST FOLLOW_STAR_in_term251	= { FOLLOW_STAR_in_term251_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLASH_in_term256  */
static	ANTLR3_BITWORD FOLLOW_SLASH_in_term256_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001630000) };
static  ANTLR3_BITSET_LIST FOLLOW_SLASH_in_term256	= { FOLLOW_SLASH_in_term256_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_signedFactor_in_term261  */
static	ANTLR3_BITWORD FOLLOW_signedFactor_in_term261_bits[]	= { ANTLR3_UINT64_LIT(0x0000000030000002) };
static  ANTLR3_BITSET_LIST FOLLOW_signedFactor_in_term261	= { FOLLOW_signedFactor_in_term261_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUS_in_signedFactor282  */
static	ANTLR3_BITWORD FOLLOW_PLUS_in_signedFactor282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000230000) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUS_in_signedFactor282	= { FOLLOW_PLUS_in_signedFactor282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUS_in_signedFactor285  */
static	ANTLR3_BITWORD FOLLOW_MINUS_in_signedFactor285_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000230000) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUS_in_signedFactor285	= { FOLLOW_MINUS_in_signedFactor285_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_factor_in_signedFactor290  */
static	ANTLR3_BITWORD FOLLOW_factor_in_signedFactor290_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_factor_in_signedFactor290	= { FOLLOW_factor_in_signedFactor290_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_variable_in_factor307  */
static	ANTLR3_BITWORD FOLLOW_variable_in_factor307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_variable_in_factor307	= { FOLLOW_variable_in_factor307_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_factor315  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_factor315_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001630000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_factor315	= { FOLLOW_LPAREN_in_factor315_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_factor318  */
static	ANTLR3_BITWORD FOLLOW_expression_in_factor318_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_factor318	= { FOLLOW_expression_in_factor318_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_factor320  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_factor320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_factor320	= { FOLLOW_RPAREN_in_factor320_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unsignedInteger_in_variable338  */
static	ANTLR3_BITWORD FOLLOW_unsignedInteger_in_variable338_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unsignedInteger_in_variable338	= { FOLLOW_unsignedInteger_in_variable338_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_identifier_in_variable346  */
static	ANTLR3_BITWORD FOLLOW_identifier_in_variable346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_identifier_in_variable346	= { FOLLOW_identifier_in_variable346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ident_in_identifier366  */
static	ANTLR3_BITWORD FOLLOW_ident_in_identifier366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ident_in_identifier366	= { FOLLOW_ident_in_identifier366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IDENT_in_ident383  */
static	ANTLR3_BITWORD FOLLOW_IDENT_in_ident383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IDENT_in_ident383	= { FOLLOW_IDENT_in_ident383_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_unsignedInteger402  */
static	ANTLR3_BITWORD FOLLOW_INT_in_unsignedInteger402_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_unsignedInteger402	= { FOLLOW_INT_in_unsignedInteger402_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start program
 * src/SimpleL.g:19:1: program : ( statement SEMI !)* ;
 */
static SimpleLParser_program_return
program(pSimpleLParser ctx)
{
    SimpleLParser_program_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    SEMI2;
    SimpleLParser_statement_return statement1;
    #undef	RETURN_TYPE_statement1
    #define	RETURN_TYPE_statement1 SimpleLParser_statement_return

    pANTLR3_BASE_TREE SEMI2_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    SEMI2       = NULL;
    statement1.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    SEMI2_tree   = NULL;


    retval.tree  = NULL;

    {
        // src/SimpleL.g:20:5: ( ( statement SEMI !)* )
        // src/SimpleL.g:20:7: ( statement SEMI !)*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // src/SimpleL.g:20:7: ( statement SEMI !)*

            for (;;)
            {
                int alt1=2;
                switch ( LA(1) )
                {
                case IDENT:
                case KW_EXIT:
                	{
                		alt1=1;
                	}
                    break;

                }

                switch (alt1)
                {
            	case 1:
            	    // src/SimpleL.g:20:8: statement SEMI !
            	    {
            	        FOLLOWPUSH(FOLLOW_statement_in_program87);
            	        statement1=statement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, statement1.tree);

            	        SEMI2 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMI, &FOLLOW_SEMI_in_program89);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprogramEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end program */

/**
 * $ANTLR start statement
 * src/SimpleL.g:26:1: statement : ( assignmentStatement | callStatement );
 */
static SimpleLParser_statement_return
statement(pSimpleLParser ctx)
{
    SimpleLParser_statement_return retval;


    pANTLR3_BASE_TREE root_0;

    SimpleLParser_assignmentStatement_return assignmentStatement3;
    #undef	RETURN_TYPE_assignmentStatement3
    #define	RETURN_TYPE_assignmentStatement3 SimpleLParser_assignmentStatement_return

    SimpleLParser_callStatement_return callStatement4;
    #undef	RETURN_TYPE_callStatement4
    #define	RETURN_TYPE_callStatement4 SimpleLParser_callStatement_return


    /* Initialize rule variables
     */

    root_0 = NULL;

    assignmentStatement3.tree = NULL;

    callStatement4.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;




    retval.tree  = NULL;

    {
        {
            //  src/SimpleL.g:27:5: ( assignmentStatement | callStatement )

            ANTLR3_UINT32 alt2;

            alt2=2;

            switch ( LA(1) )
            {
            case IDENT:
            	{
            		alt2=1;
            	}
                break;
            case KW_EXIT:
            	{
            		alt2=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulestatementEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // src/SimpleL.g:27:7: assignmentStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_assignmentStatement_in_statement112);
        	        assignmentStatement3=assignmentStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, assignmentStatement3.tree);

        	    }
        	    break;
        	case 2:
        	    // src/SimpleL.g:28:7: callStatement
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_callStatement_in_statement120);
        	        callStatement4=callStatement(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, callStatement4.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end statement */

/**
 * $ANTLR start assignmentStatement
 * src/SimpleL.g:31:1: assignmentStatement : identifier ASSIGN expression -> ^( ASSIGN_VAR identifier expression ) ;
 */
static SimpleLParser_assignmentStatement_return
assignmentStatement(pSimpleLParser ctx)
{
    SimpleLParser_assignmentStatement_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ASSIGN6;
    SimpleLParser_identifier_return identifier5;
    #undef	RETURN_TYPE_identifier5
    #define	RETURN_TYPE_identifier5 SimpleLParser_identifier_return

    SimpleLParser_expression_return expression7;
    #undef	RETURN_TYPE_expression7
    #define	RETURN_TYPE_expression7 SimpleLParser_expression_return

    pANTLR3_BASE_TREE ASSIGN6_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ASSIGN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_identifier;
    /* Initialize rule variables
     */

    root_0 = NULL;

    ASSIGN6       = NULL;
    identifier5.tree = NULL;

    expression7.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    ASSIGN6_tree   = NULL;

    stream_ASSIGN   = NULL;
    #define CREATE_stream_ASSIGN  if (stream_ASSIGN == NULL) {stream_ASSIGN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ASSIGN"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }
    stream_identifier   = NULL;
    #define CREATE_stream_identifier  if (stream_identifier == NULL) {stream_identifier = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule identifier"); }

    retval.tree  = NULL;

    {
        // src/SimpleL.g:32:5: ( identifier ASSIGN expression -> ^( ASSIGN_VAR identifier expression ) )
        // src/SimpleL.g:32:7: identifier ASSIGN expression
        {
            FOLLOWPUSH(FOLLOW_identifier_in_assignmentStatement137);
            identifier5=identifier(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentStatementEx;
            }

            CREATE_stream_identifier; stream_identifier->add(stream_identifier, identifier5.tree, NULL);

            ASSIGN6 = (pANTLR3_COMMON_TOKEN) MATCHT(ASSIGN, &FOLLOW_ASSIGN_in_assignmentStatement139);
            if  (HASEXCEPTION())
            {
                goto ruleassignmentStatementEx;
            }
             
            CREATE_stream_ASSIGN; stream_ASSIGN->add(stream_ASSIGN, ASSIGN6, NULL);


            FOLLOWPUSH(FOLLOW_expression_in_assignmentStatement141);
            expression7=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleassignmentStatementEx;
            }

            CREATE_stream_expression; stream_expression->add(stream_expression, expression7.tree, NULL);

            /* AST REWRITE
             * elements          : identifier, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 32:36: -> ^( ASSIGN_VAR identifier expression )
            	{
            	    // src/SimpleL.g:32:39: ^( ASSIGN_VAR identifier expression )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ASSIGN_VAR, (pANTLR3_UINT8)"ASSIGN_VAR")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_identifier == NULL ? NULL : stream_identifier->nextTree(stream_identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto ruleassignmentStatementEx; /* Prevent compiler warnings */
    ruleassignmentStatementEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ASSIGN != NULL) stream_ASSIGN->free(stream_ASSIGN);
        if (stream_expression != NULL) stream_expression->free(stream_expression);
        if (stream_identifier != NULL) stream_identifier->free(stream_identifier);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end assignmentStatement */

/**
 * $ANTLR start callStatement
 * src/SimpleL.g:35:1: callStatement : KW_EXIT identifier -> ^( FUNC_CALL KW_EXIT identifier ) ;
 */
static SimpleLParser_callStatement_return
callStatement(pSimpleLParser ctx)
{
    SimpleLParser_callStatement_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    KW_EXIT8;
    SimpleLParser_identifier_return identifier9;
    #undef	RETURN_TYPE_identifier9
    #define	RETURN_TYPE_identifier9 SimpleLParser_identifier_return

    pANTLR3_BASE_TREE KW_EXIT8_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_KW_EXIT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_identifier;
    /* Initialize rule variables
     */

    root_0 = NULL;

    KW_EXIT8       = NULL;
    identifier9.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    KW_EXIT8_tree   = NULL;

    stream_KW_EXIT   = NULL;
    #define CREATE_stream_KW_EXIT  if (stream_KW_EXIT == NULL) {stream_KW_EXIT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token KW_EXIT"); } 
    stream_identifier   = NULL;
    #define CREATE_stream_identifier  if (stream_identifier == NULL) {stream_identifier = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule identifier"); }

    retval.tree  = NULL;

    {
        // src/SimpleL.g:36:5: ( KW_EXIT identifier -> ^( FUNC_CALL KW_EXIT identifier ) )
        // src/SimpleL.g:36:7: KW_EXIT identifier
        {
            KW_EXIT8 = (pANTLR3_COMMON_TOKEN) MATCHT(KW_EXIT, &FOLLOW_KW_EXIT_in_callStatement168);
            if  (HASEXCEPTION())
            {
                goto rulecallStatementEx;
            }
             
            CREATE_stream_KW_EXIT; stream_KW_EXIT->add(stream_KW_EXIT, KW_EXIT8, NULL);


            FOLLOWPUSH(FOLLOW_identifier_in_callStatement170);
            identifier9=identifier(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecallStatementEx;
            }

            CREATE_stream_identifier; stream_identifier->add(stream_identifier, identifier9.tree, NULL);

            /* AST REWRITE
             * elements          : KW_EXIT, identifier
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 36:26: -> ^( FUNC_CALL KW_EXIT identifier )
            	{
            	    // src/SimpleL.g:36:29: ^( FUNC_CALL KW_EXIT identifier )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNC_CALL, (pANTLR3_UINT8)"FUNC_CALL")
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, 
            	        stream_KW_EXIT == NULL ? NULL : stream_KW_EXIT->nextNode(stream_KW_EXIT)
            	        );

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_identifier == NULL ? NULL : stream_identifier->nextTree(stream_identifier));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}


            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }

    // This is where rules clean up and exit
    //
    goto rulecallStatementEx; /* Prevent compiler warnings */
    rulecallStatementEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_KW_EXIT != NULL) stream_KW_EXIT->free(stream_KW_EXIT);
        if (stream_identifier != NULL) stream_identifier->free(stream_identifier);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end callStatement */

/**
 * $ANTLR start expression
 * src/SimpleL.g:42:1: expression : term ( ( PLUS ^| MINUS ^) term )* ;
 */
static SimpleLParser_expression_return
expression(pSimpleLParser ctx)
{
    SimpleLParser_expression_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    PLUS11;
    pANTLR3_COMMON_TOKEN    MINUS12;
    SimpleLParser_term_return term10;
    #undef	RETURN_TYPE_term10
    #define	RETURN_TYPE_term10 SimpleLParser_term_return

    SimpleLParser_term_return term13;
    #undef	RETURN_TYPE_term13
    #define	RETURN_TYPE_term13 SimpleLParser_term_return

    pANTLR3_BASE_TREE PLUS11_tree;
    pANTLR3_BASE_TREE MINUS12_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    PLUS11       = NULL;
    MINUS12       = NULL;
    term10.tree = NULL;

    term13.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    PLUS11_tree   = NULL;
    MINUS12_tree   = NULL;


    retval.tree  = NULL;

    {
        // src/SimpleL.g:43:5: ( term ( ( PLUS ^| MINUS ^) term )* )
        // src/SimpleL.g:43:7: term ( ( PLUS ^| MINUS ^) term )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            FOLLOWPUSH(FOLLOW_term_in_expression199);
            term10=term(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, term10.tree);

            // src/SimpleL.g:44:7: ( ( PLUS ^| MINUS ^) term )*

            for (;;)
            {
                int alt4=2;
                switch ( LA(1) )
                {
                case MINUS:
                case PLUS:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4)
                {
            	case 1:
            	    // src/SimpleL.g:44:9: ( PLUS ^| MINUS ^) term
            	    {
            	        // src/SimpleL.g:44:9: ( PLUS ^| MINUS ^)
            	        {
            	            int alt3=2;
            	            switch ( LA(1) )
            	            {
            	            case PLUS:
            	            	{
            	            		alt3=1;
            	            	}
            	                break;
            	            case MINUS:
            	            	{
            	            		alt3=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 3;
            	                EXCEPTION->state        = 0;


            	                goto ruleexpressionEx;

            	            }

            	            switch (alt3)
            	            {
            	        	case 1:
            	        	    // src/SimpleL.g:44:10: PLUS ^
            	        	    {
            	        	        PLUS11 = (pANTLR3_COMMON_TOKEN) MATCHT(PLUS, &FOLLOW_PLUS_in_expression210);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }

            	        	        PLUS11_tree = 
            	        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, PLUS11))
            	        	        ;
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, PLUS11_tree, root_0));


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // src/SimpleL.g:44:18: MINUS ^
            	        	    {
            	        	        MINUS12 = (pANTLR3_COMMON_TOKEN) MATCHT(MINUS, &FOLLOW_MINUS_in_expression215);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleexpressionEx;
            	        	        }

            	        	        MINUS12_tree = 
            	        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, MINUS12))
            	        	        ;
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, MINUS12_tree, root_0));


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_term_in_expression220);
            	        term13=term(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpressionEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, term13.tree);

            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end expression */

/**
 * $ANTLR start term
 * src/SimpleL.g:47:1: term : signedFactor ( ( STAR ^| SLASH ^) signedFactor )* ;
 */
static SimpleLParser_term_return
term(pSimpleLParser ctx)
{
    SimpleLParser_term_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    STAR15;
    pANTLR3_COMMON_TOKEN    SLASH16;
    SimpleLParser_signedFactor_return signedFactor14;
    #undef	RETURN_TYPE_signedFactor14
    #define	RETURN_TYPE_signedFactor14 SimpleLParser_signedFactor_return

    SimpleLParser_signedFactor_return signedFactor17;
    #undef	RETURN_TYPE_signedFactor17
    #define	RETURN_TYPE_signedFactor17 SimpleLParser_signedFactor_return

    pANTLR3_BASE_TREE STAR15_tree;
    pANTLR3_BASE_TREE SLASH16_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    STAR15       = NULL;
    SLASH16       = NULL;
    signedFactor14.tree = NULL;

    signedFactor17.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    STAR15_tree   = NULL;
    SLASH16_tree   = NULL;


    retval.tree  = NULL;

    {
        // src/SimpleL.g:48:5: ( signedFactor ( ( STAR ^| SLASH ^) signedFactor )* )
        // src/SimpleL.g:48:7: signedFactor ( ( STAR ^| SLASH ^) signedFactor )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            FOLLOWPUSH(FOLLOW_signedFactor_in_term240);
            signedFactor14=signedFactor(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletermEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, signedFactor14.tree);

            // src/SimpleL.g:49:7: ( ( STAR ^| SLASH ^) signedFactor )*

            for (;;)
            {
                int alt6=2;
                switch ( LA(1) )
                {
                case SLASH:
                case STAR:
                	{
                		alt6=1;
                	}
                    break;

                }

                switch (alt6)
                {
            	case 1:
            	    // src/SimpleL.g:49:9: ( STAR ^| SLASH ^) signedFactor
            	    {
            	        // src/SimpleL.g:49:9: ( STAR ^| SLASH ^)
            	        {
            	            int alt5=2;
            	            switch ( LA(1) )
            	            {
            	            case STAR:
            	            	{
            	            		alt5=1;
            	            	}
            	                break;
            	            case SLASH:
            	            	{
            	            		alt5=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 5;
            	                EXCEPTION->state        = 0;


            	                goto ruletermEx;

            	            }

            	            switch (alt5)
            	            {
            	        	case 1:
            	        	    // src/SimpleL.g:49:10: STAR ^
            	        	    {
            	        	        STAR15 = (pANTLR3_COMMON_TOKEN) MATCHT(STAR, &FOLLOW_STAR_in_term251);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletermEx;
            	        	        }

            	        	        STAR15_tree = 
            	        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, STAR15))
            	        	        ;
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, STAR15_tree, root_0));


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // src/SimpleL.g:49:18: SLASH ^
            	        	    {
            	        	        SLASH16 = (pANTLR3_COMMON_TOKEN) MATCHT(SLASH, &FOLLOW_SLASH_in_term256);
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruletermEx;
            	        	        }

            	        	        SLASH16_tree = 
            	        	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SLASH16))
            	        	        ;
            	        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, SLASH16_tree, root_0));


            	        	    }
            	        	    break;

            	            }
            	        }

            	        FOLLOWPUSH(FOLLOW_signedFactor_in_term261);
            	        signedFactor17=signedFactor(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletermEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, signedFactor17.tree);

            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletermEx; /* Prevent compiler warnings */
    ruletermEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end term */

/**
 * $ANTLR start signedFactor
 * src/SimpleL.g:52:1: signedFactor : ( PLUS ^| MINUS ^)? factor ;
 */
static SimpleLParser_signedFactor_return
signedFactor(pSimpleLParser ctx)
{
    SimpleLParser_signedFactor_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    PLUS18;
    pANTLR3_COMMON_TOKEN    MINUS19;
    SimpleLParser_factor_return factor20;
    #undef	RETURN_TYPE_factor20
    #define	RETURN_TYPE_factor20 SimpleLParser_factor_return

    pANTLR3_BASE_TREE PLUS18_tree;
    pANTLR3_BASE_TREE MINUS19_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    PLUS18       = NULL;
    MINUS19       = NULL;
    factor20.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    PLUS18_tree   = NULL;
    MINUS19_tree   = NULL;


    retval.tree  = NULL;

    {
        // src/SimpleL.g:53:5: ( ( PLUS ^| MINUS ^)? factor )
        // src/SimpleL.g:53:7: ( PLUS ^| MINUS ^)? factor
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // src/SimpleL.g:53:7: ( PLUS ^| MINUS ^)?
            {
                int alt7=3;
                switch ( LA(1) )
                {
                    case PLUS:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case MINUS:
                    	{
                    		alt7=2;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // src/SimpleL.g:53:8: PLUS ^
            	    {
            	        PLUS18 = (pANTLR3_COMMON_TOKEN) MATCHT(PLUS, &FOLLOW_PLUS_in_signedFactor282);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignedFactorEx;
            	        }

            	        PLUS18_tree = 
            	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, PLUS18))
            	        ;
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, PLUS18_tree, root_0));


            	    }
            	    break;
            	case 2:
            	    // src/SimpleL.g:53:14: MINUS ^
            	    {
            	        MINUS19 = (pANTLR3_COMMON_TOKEN) MATCHT(MINUS, &FOLLOW_MINUS_in_signedFactor285);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesignedFactorEx;
            	        }

            	        MINUS19_tree = 
            	        (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, MINUS19))
            	        ;
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, MINUS19_tree, root_0));


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_factor_in_signedFactor290);
            factor20=factor(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesignedFactorEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, factor20.tree);

        }

    }

    // This is where rules clean up and exit
    //
    goto rulesignedFactorEx; /* Prevent compiler warnings */
    rulesignedFactorEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end signedFactor */

/**
 * $ANTLR start factor
 * src/SimpleL.g:56:1: factor : ( variable | LPAREN ! expression RPAREN !);
 */
static SimpleLParser_factor_return
factor(pSimpleLParser ctx)
{
    SimpleLParser_factor_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LPAREN22;
    pANTLR3_COMMON_TOKEN    RPAREN24;
    SimpleLParser_variable_return variable21;
    #undef	RETURN_TYPE_variable21
    #define	RETURN_TYPE_variable21 SimpleLParser_variable_return

    SimpleLParser_expression_return expression23;
    #undef	RETURN_TYPE_expression23
    #define	RETURN_TYPE_expression23 SimpleLParser_expression_return

    pANTLR3_BASE_TREE LPAREN22_tree;
    pANTLR3_BASE_TREE RPAREN24_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    LPAREN22       = NULL;
    RPAREN24       = NULL;
    variable21.tree = NULL;

    expression23.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    LPAREN22_tree   = NULL;
    RPAREN24_tree   = NULL;


    retval.tree  = NULL;

    {
        {
            //  src/SimpleL.g:57:5: ( variable | LPAREN ! expression RPAREN !)

            ANTLR3_UINT32 alt8;

            alt8=2;

            switch ( LA(1) )
            {
            case IDENT:
            case INT:
            	{
            		alt8=1;
            	}
                break;
            case LPAREN:
            	{
            		alt8=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 8;
                EXCEPTION->state        = 0;


                goto rulefactorEx;

            }

            switch (alt8)
            {
        	case 1:
        	    // src/SimpleL.g:57:7: variable
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_variable_in_factor307);
        	        variable21=variable(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefactorEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, variable21.tree);

        	    }
        	    break;
        	case 2:
        	    // src/SimpleL.g:58:7: LPAREN ! expression RPAREN !
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        LPAREN22 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_factor315);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefactorEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_in_factor318);
        	        expression23=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefactorEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, expression23.tree);

        	        RPAREN24 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_factor320);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefactorEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulefactorEx; /* Prevent compiler warnings */
    rulefactorEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end factor */

/**
 * $ANTLR start variable
 * src/SimpleL.g:61:1: variable : ( unsignedInteger | identifier );
 */
static SimpleLParser_variable_return
variable(pSimpleLParser ctx)
{
    SimpleLParser_variable_return retval;


    pANTLR3_BASE_TREE root_0;

    SimpleLParser_unsignedInteger_return unsignedInteger25;
    #undef	RETURN_TYPE_unsignedInteger25
    #define	RETURN_TYPE_unsignedInteger25 SimpleLParser_unsignedInteger_return

    SimpleLParser_identifier_return identifier26;
    #undef	RETURN_TYPE_identifier26
    #define	RETURN_TYPE_identifier26 SimpleLParser_identifier_return


    /* Initialize rule variables
     */

    root_0 = NULL;

    unsignedInteger25.tree = NULL;

    identifier26.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;




    retval.tree  = NULL;

    {
        {
            //  src/SimpleL.g:62:5: ( unsignedInteger | identifier )

            ANTLR3_UINT32 alt9;

            alt9=2;

            switch ( LA(1) )
            {
            case INT:
            	{
            		alt9=1;
            	}
                break;
            case IDENT:
            	{
            		alt9=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 9;
                EXCEPTION->state        = 0;


                goto rulevariableEx;

            }

            switch (alt9)
            {
        	case 1:
        	    // src/SimpleL.g:62:7: unsignedInteger
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_unsignedInteger_in_variable338);
        	        unsignedInteger25=unsignedInteger(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevariableEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, unsignedInteger25.tree);

        	    }
        	    break;
        	case 2:
        	    // src/SimpleL.g:63:7: identifier
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


        	        FOLLOWPUSH(FOLLOW_identifier_in_variable346);
        	        identifier26=identifier(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulevariableEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, identifier26.tree);

        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulevariableEx; /* Prevent compiler warnings */
    rulevariableEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end variable */

/**
 * $ANTLR start identifier
 * src/SimpleL.g:70:1: identifier : ident ;
 */
static SimpleLParser_identifier_return
identifier(pSimpleLParser ctx)
{
    SimpleLParser_identifier_return retval;


    pANTLR3_BASE_TREE root_0;

    SimpleLParser_ident_return ident27;
    #undef	RETURN_TYPE_ident27
    #define	RETURN_TYPE_ident27 SimpleLParser_ident_return


    /* Initialize rule variables
     */

    root_0 = NULL;

    ident27.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;




    retval.tree  = NULL;

    {
        // src/SimpleL.g:71:5: ( ident )
        // src/SimpleL.g:71:7: ident
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            FOLLOWPUSH(FOLLOW_ident_in_identifier366);
            ident27=ident(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleidentifierEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, ident27.tree);

        }

    }

    // This is where rules clean up and exit
    //
    goto ruleidentifierEx; /* Prevent compiler warnings */
    ruleidentifierEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end identifier */

/**
 * $ANTLR start ident
 * src/SimpleL.g:74:1: ident : IDENT ;
 */
static SimpleLParser_ident_return
ident(pSimpleLParser ctx)
{
    SimpleLParser_ident_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    IDENT28;

    pANTLR3_BASE_TREE IDENT28_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    IDENT28       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    IDENT28_tree   = NULL;


    retval.tree  = NULL;

    {
        // src/SimpleL.g:75:5: ( IDENT )
        // src/SimpleL.g:75:7: IDENT
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            IDENT28 = (pANTLR3_COMMON_TOKEN) MATCHT(IDENT, &FOLLOW_IDENT_in_ident383);
            if  (HASEXCEPTION())
            {
                goto ruleidentEx;
            }

            IDENT28_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, IDENT28));
            ADAPTOR->addChild(ADAPTOR, root_0, IDENT28_tree);


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleidentEx; /* Prevent compiler warnings */
    ruleidentEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end ident */

/**
 * $ANTLR start unsignedInteger
 * src/SimpleL.g:81:1: unsignedInteger : INT ;
 */
static SimpleLParser_unsignedInteger_return
unsignedInteger(pSimpleLParser ctx)
{
    SimpleLParser_unsignedInteger_return retval;


    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    INT29;

    pANTLR3_BASE_TREE INT29_tree;

    /* Initialize rule variables
     */

    root_0 = NULL;

    INT29       = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    INT29_tree   = NULL;


    retval.tree  = NULL;

    {
        // src/SimpleL.g:82:5: ( INT )
        // src/SimpleL.g:82:7: INT
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            INT29 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_unsignedInteger402);
            if  (HASEXCEPTION())
            {
                goto ruleunsignedIntegerEx;
            }

            INT29_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, INT29));
            ADAPTOR->addChild(ADAPTOR, root_0, INT29_tree);


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleunsignedIntegerEx; /* Prevent compiler warnings */
    ruleunsignedIntegerEx: ;
    retval.stop = LT(-1);


    	retval.stop = LT(-1);

    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }
    return retval;
}
/* $ANTLR end unsignedInteger */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
